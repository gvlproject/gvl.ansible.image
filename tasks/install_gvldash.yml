- name: GVLDash - Create GVL webapp user group
  group: name=webapps state=present

- name: GVLDash - Create GVL web user
  user: name={{ gvl_dash_webuser }} comment="GVL Web User" group=webapps shell=/bin/bash

- name: GVLDash - Create webapp directories
  file:
    path: "{{ gvl_dash_path }}"
    state: 'directory'
    owner: "{{ gvl_dash_webuser }}"
    group: "webapps"
    mode: "0755"

- name: GVLDash - Checkout application source
  git: repo={{ gvl_dash_repository }} dest={{ gvl_dash_path }} accept_hostkey=yes
  become: true
  become_user: "{{ gvl_dash_webuser }}"

- name: GVLDash - Install requirements
  pip: requirements={{ gvl_dash_path }}/requirements.txt virtualenv={{ gvl_dash_path }}/.venv state=latest
  become: true
  become_user: "{{ gvl_dash_webuser }}"
  tags:
    - install
    - deploy

- name: GVLDash - Django collectstatic
  django_manage: command=collectstatic app_path={{ gvl_dash_path }}/gvldash virtualenv={{ gvl_dash_path }}/.venv
  become: true
  become_user: "{{ gvl_dash_webuser }}"
  tags:
    - install
    - deploy

- name: GVLDash - Ensure nginx can access static path
  file:
    path: '{{ gvl_dash_path }}/gvldash/static/'
    state: 'directory'
    group: 'www-data'
    mode: '0755'

- name: GVLDash - Configure gvldash to run an upstart job
  template: src=gvldash.service.j2 dest=/etc/systemd/system/gvldash.service

- name: GVLDash - Create GVL version info folder
  file:
    path: '{{ gvl_install_path }}/info/'
    state: 'directory'
    mode: '0755'

- name: GVLDash - Copy GVL image version info file
  template: src=version_info.j2 dest={{ gvl_install_path }}/info/image.yml

- name: Start GVLDashboard
  systemd: state=started name=gvldash daemon_reload=yes

- name: GVLDash - Make sure the service starts up correctly
  wait_for: port=8000 delay=5 state=started timeout=150

- name: GVLDash - Stop the service
  service: name=gvldash state=stopped
